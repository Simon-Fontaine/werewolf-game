generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  username      String    @unique
  passwordHash  String?
  isGuest       Boolean   @default(false)
  locale        String    @default("en")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  sessions      Session[]
  playerProfiles GamePlayer[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id            String      @id @default(cuid())
  code          String      @unique
  status        GameStatus  @default(LOBBY)
  phase         GamePhase   @default(WAITING)
  dayNumber     Int         @default(0)
  settings      Json        // GameSettings type
  locale        String      @default("en")
  winningSide   Side?
  startedAt     DateTime?
  endedAt       DateTime?
  createdAt     DateTime    @default(now())
  
  players       GamePlayer[]
  events        GameEvent[]
  votes         Vote[]
  actions       GameAction[]
  roleStates    RoleState[]
  timers        GameTimer[]
  messages      ChatMessage[]
}

model GamePlayer {
  id            String      @id @default(cuid())
  gameId        String
  userId        String
  playerNumber  Int
  nickname      String
  role          Role?
  isAlive       Boolean     @default(true)
  isHost        Boolean     @default(false)
  disconnectedAt DateTime?  // For reconnection handling
  joinedAt      DateTime    @default(now())
  
  game          Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id])
  votesCast     Vote[]      @relation("VoterRelation")
  votesReceived Vote[]      @relation("TargetRelation")
  actions       GameAction[]
  roleState     RoleState?
  lover         LoverPair?  @relation("Lover1")
  lovedBy       LoverPair?  @relation("Lover2")
  messages      ChatMessage[]
  
  @@unique([gameId, userId])
  @@unique([gameId, playerNumber])
}

model Vote {
  id            String      @id @default(cuid())
  gameId        String
  voterId       String
  targetId      String?     // null for skip vote
  phase         GamePhase
  dayNumber     Int
  round         Int         @default(1) // For multiple voting rounds
  createdAt     DateTime    @default(now())
  
  game          Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  voter         GamePlayer  @relation("VoterRelation", fields: [voterId], references: [id])
  target        GamePlayer? @relation("TargetRelation", fields: [targetId], references: [id])
  
  @@unique([gameId, voterId, phase, dayNumber, round])
}

model GameAction {
  id            String      @id @default(cuid())
  gameId        String
  playerId      String
  action        ActionType
  targetId      String?
  secondaryTargetId String? // For cupid linking lovers
  phase         GamePhase
  dayNumber     Int
  processed     Boolean     @default(false)
  result        Json?       // Store action results
  createdAt     DateTime    @default(now())
  
  game          Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player        GamePlayer  @relation(fields: [playerId], references: [id])
}

model GameEvent {
  id            String      @id @default(cuid())
  gameId        String
  type          EventType
  data          Json
  visibility    EventVisibility @default(PUBLIC)
  visibleTo     String[]    // Player IDs who can see this event
  dayNumber     Int
  phase         GamePhase
  createdAt     DateTime    @default(now())
  
  game          Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

// Track role-specific states
model RoleState {
  id            String      @id @default(cuid())
  gameId        String
  playerId      String      @unique
  role          Role
  
  // Witch specific
  healPotionUsed    Boolean @default(false)
  poisonPotionUsed  Boolean @default(false)
  
  // Hunter specific
  hasShot           Boolean @default(false)
  
  // Cupid/Lovers
  isLover           Boolean @default(false)
  
  // Additional role states can be added here
  customData        Json?   // For extensibility
  
  game          Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player        GamePlayer  @relation(fields: [playerId], references: [id])
}

model LoverPair {
  id            String      @id @default(cuid())
  gameId        String
  player1Id     String      @unique
  player2Id     String      @unique
  createdAt     DateTime    @default(now())
  
  player1       GamePlayer  @relation("Lover1", fields: [player1Id], references: [id])
  player2       GamePlayer  @relation("Lover2", fields: [player2Id], references: [id])
}

// Track phase timers
model GameTimer {
  id            String      @id @default(cuid())
  gameId        String
  phase         GamePhase
  dayNumber     Int
  startedAt     DateTime    @default(now())
  duration      Int         // seconds
  pausedAt      DateTime?
  
  game          Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@unique([gameId, phase, dayNumber])
}

// Chat messages
model ChatMessage {
  id            String      @id @default(cuid())
  gameId        String
  playerId      String
  content       String
  type          MessageType @default(CHAT)
  isAlive       Boolean     // Was the player alive when sending
  dayNumber     Int
  phase         GamePhase
  createdAt     DateTime    @default(now())
  
  game          Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player        GamePlayer  @relation(fields: [playerId], references: [id])
}

enum GameStatus {
  LOBBY
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum GamePhase {
  WAITING
  NIGHT
  DISCUSSION
  VOTING
  EXECUTION
  GAME_OVER
}

enum Role {
  VILLAGER
  WEREWOLF
  SEER
  DOCTOR
  HUNTER
  WITCH
  CUPID
  LITTLE_GIRL
  THIEF
  SHERIFF
}

enum Side {
  VILLAGE
  WEREWOLF
  LOVERS
  NONE
}

enum ActionType {
  WEREWOLF_KILL
  SEER_CHECK
  DOCTOR_SAVE
  WITCH_KILL
  WITCH_SAVE
  HUNTER_SHOOT
  CUPID_LINK
  SHERIFF_REVEAL
  THIEF_CHOOSE
}

enum EventType {
  GAME_STARTED
  PHASE_CHANGED
  PLAYER_KILLED
  PLAYER_VOTED
  PLAYER_ELIMINATED
  ROLE_REVEALED
  LOVERS_REVEALED
  POTION_USED
  GAME_ENDED
  PLAYER_DISCONNECTED
  PLAYER_RECONNECTED
}

enum EventVisibility {
  PUBLIC      // All players
  PRIVATE     // Specific players only
  ROLE        // Players with specific roles
  DEAD        // Dead players only
}

enum MessageType {
  CHAT
  SYSTEM
  DEATH_MESSAGE
  ROLE_ACTION
}